*** Project: AI-Powered Resume Screening System ***

📌 Goal of the Project:

To develop an AI-driven resume screening system that efficiently ranks multiple resumes based on their similarity to a given job description, using Natural Language Processing (NLP) and Machine Learning techniques.
---

## **📌 Table of Contents**
1️⃣ Introduction  
2️⃣ Libraries Used and Their Role  
3️⃣ Code Breakdown with Explanation  
4️⃣ TF-IDF + Cosine Similarity: Why & How?  
5️⃣ Ranking System (High, Medium, Low)  
6️⃣ Selecting Top N Resumes  
7️⃣ Running the Streamlit App  
8️⃣ Possible Improvements  

---

## **1️⃣ Introduction**
This **Streamlit-powered Resume Screening App** allows users to **upload multiple resumes** and **compare them with a given job description**. It ranks resumes based on **text similarity** using **TF-IDF & Cosine Similarity**. The **top matching resumes** are then displayed in a ranked order.

### **🔹 Key Features:**
✅ Supports **PDF & DOCX** formats  
✅ Uses **Natural Language Processing (NLP)** to extract keywords  
✅ Computes **TF-IDF + Cosine Similarity** to measure similarity  
✅ Categorizes resumes into **High, Medium, Low** ranks  
✅ Lets users **select top N resumes**  

---

## **2️⃣ Libraries Used & Their Role**
### **🔹 1. `streamlit`**  
Used for creating the **interactive web app**, handling **file uploads**, and displaying results.

### **🔹 2. `pdfminer.six`**  
Extracts **text from PDF files**.

### **🔹 3. `python-docx`**  
Extracts **text from Word (DOCX) files**.

### **🔹 4. `spacy`**  
Processes **natural language text**, removing **stopwords** (common words like *"the", "and"*) and extracting **keywords**.

### **🔹 5. `sklearn.feature_extraction.text.TfidfVectorizer`**  
Converts **text data into numerical vectors** using **TF-IDF** (Term Frequency-Inverse Document Frequency), which represents how important words are in a document.

### **🔹 6. `sklearn.metrics.pairwise.cosine_similarity`**  
Calculates **similarity between the job description and resumes** based on **TF-IDF vectors**.

---

## **3️⃣ Code Breakdown with Explanation**
Let's break down the **main parts of the code**:

### **🔹 Step 1: Load NLP Model**
```python
try:
    nlp = spacy.load("en_core_web_sm")
except OSError:
    st.error("Spacy model 'en_core_web_sm' not found. Run `python -m spacy download en_core_web_sm` to install it.")
    st.stop()
```
🔹 Loads the **Spacy NLP model** to process text.  
🔹 If the model is missing, it shows an **error message** and stops execution.

---

### **🔹 Step 2: Streamlit UI**
```python
st.title("📄 Multi-Resume Screening App")
st.write("Upload multiple resumes (PDF/DOCX) and enter a job description to rank them based on relevance.")
```
🔹 **Displays the app title & description**.

```python
job_description = st.text_area("📌 Enter Job Description:")
uploaded_files = st.file_uploader("📂 Upload Resumes (Max 10)", type=["pdf", "docx"], accept_multiple_files=True)
top_n = st.number_input("🎯 Select Top N Resumes to Display", min_value=1, max_value=10, value=3, step=1)
```
🔹 **User inputs:**  
- A **job description**  
- Uploads **multiple resumes** (Max **10**)  
- Selects **Top N Resumes** to display  

---

### **🔹 Step 3: Process Each Resume**
```python
resume_scores = []

for file in uploaded_files:
    if file.name.endswith(".pdf"):
        resume_text = extract_text_from_pdf(file).lower()
    else:
        doc = Document(file)
        resume_text = "\n".join([para.text for para in doc.paragraphs]).lower()
```
🔹 **Extracts text** from PDF & DOCX resumes.  
🔹 **Converts text to lowercase** for consistency.

---

### **🔹 Step 4: NLP - Extract Keywords**
```python
resume_keywords = {token.text for token in nlp(resume_text) if token.is_alpha and not token.is_stop}
job_desc_keywords = {token.text for token in nlp(job_description) if token.is_alpha and not token.is_stop}
```
🔹 **Tokenizes** the text into words.  
🔹 **Removes stopwords & punctuation** (e.g., "is", "the").  
🔹 Extracts **only meaningful keywords**.

---

### **🔹 Step 5: Compute TF-IDF + Cosine Similarity**
```python
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform([" ".join(job_desc_keywords), " ".join(resume_keywords)])
score = round(cosine_similarity(tfidf_matrix[0], tfidf_matrix[1])[0][0] * 100, 2)
resume_scores.append((file.name, score))
```
🔹 **Converts keywords into numerical vectors**.  
🔹 **Calculates similarity** using **Cosine Similarity**.  
🔹 **Stores the resume & its similarity score**.

---

## **4️⃣ TF-IDF + Cosine Similarity: Why & How?**
🔹 **TF-IDF (Term Frequency-Inverse Document Frequency)**  
- Measures how important a word is in a document.  
- Gives higher weight to **unique words** and **lowers common words**.  

🔹 **Cosine Similarity**  
- Computes **how similar two documents are**.  
- **1 = 100% similarity**, **0 = No similarity**.  

---

## **5️⃣ Ranking System (High, Medium, Low)**
```python
high_matches = [res for res in resume_scores if res[1] >= 70]
medium_matches = [res for res in resume_scores if 40 <= res[1] < 70]
low_matches = [res for res in resume_scores if res[1] < 40]
```
🔹 **High Match:** ≥ **70%**  
🔹 **Medium Match:** **40-69%**  
🔹 **Low Match:** < **40%**  

```python
st.success("✅ High Match Resumes (≥ 70%)")
st.warning("⚠️ Medium Match Resumes (40% - 69%)")
st.error("❌ Low Match Resumes (< 40%)")
```
🔹 **Displays ranked resumes in color-coded categories**.  

---

## **6️⃣ Selecting Top N Resumes**
```python
st.subheader(f"🏆 Top {top_n} Resume(s) Based on Match Score")
for i in range(min(top_n, len(resume_scores))):
    st.write(f"🥇 {resume_scores[i][0]} → Match Score: {resume_scores[i][1]}%")
```
🔹 Sorts **resumes in descending order**.  
🔹 **Displays only the Top N resumes**.  

---

## **7️⃣ Running the Streamlit App**
**To run the app:**  
1️⃣ **Install dependencies:**  
```bash
pip install streamlit spacy pdfminer.six python-docx scikit-learn
python -m spacy download en_core_web_sm
```
2️⃣ **Run the app:**  
```bash
streamlit run app.py
```

---

## **8️⃣ Possible Improvements**
✅ **Use Large Language Models (LLMs) for better matching**  
✅ **Improve ranking with more NLP techniques**  
✅ **Add experience & skill-based filtering**  

---

### **🚀 Conclusion**
This **Resume Screening App** effectively filters resumes **based on job descriptions**, using **TF-IDF & Cosine Similarity**. It helps recruiters quickly find the **best-fit resumes** in a **ranked order**.  

Now, you’re ready to **build and improve** your resume screening system! 🚀 Let me know if you have any questions. 😊
